/*
I)Add the following functionalities in your program..
	a)Accept Available
	b)Display Allocation , Max
	c)Display the contents of need matrix
	d)Display Available
Process       Allocation         Max

   	    A    B    C       A     B    C
   	    
   P0       0    1    0       7     5    3
   P1       2    0    0       3     2    2
   P2       3    0    2       9     0    2
   P3       2    1    1       2     2    2
   P4       0    0    2       4     3    3
   
II)Modify above program so as to include the following:
    a)Accept Request for a process
    B)Resource Request Algorithm
    c)Safety Algorithm
    
consider a system with 'n' processes and 'm'resource types.Accept no.of instsnce
for every resource type.For each process accept the alloacation and maximum
requirement matrix.Write a program to display the content of need matrix and to
check if the given request of a process can be granted immediatly or not.....

*/
#include<stdio.h>
#include<stdlib.h>
int allocation[20][20],max[20][20],available[20],need[20][20],safe[10],s=0;
int finish[10],work[10],cnt=0,flag=0,temp=0;
int p,r,i,j,ch,ind,req[10];
void check()
{
	temp=0;
	s=0;
	for(i=0;i<p;i++)
	 for(j=0;j<r;j++)
	   need[i][j]=max[i][j]-allocation[i][j];
	printf("\nNeed Table is:\n");
	 for(i=0;i<p;i++)
	  {
	    for(j=0;j<r;j++)
	     printf("%d\t",need[i][j]);
	     printf("\n");
	  }
	  for(i=0;i<p;i++)
	   finish[i]=0;
	  for(i=0;i<r;i++)
	  work[i]=available[i];
	   while(temp<2)
	   {
	     for(i=0;i<p;i++)
	      {
	        for(j=0;j<r;j++)
	        {
	          if(finish[i]==0 && need[i][j]<=work[j])
	           flag=1;
	          else
	          {
	            flag=0;
	            break;
	          }
	        }
	        if(flag==1)
	        {
	         for(j=0;j<r;j++)
	         work[j]=work[j]+allocation[i][j];
	         finish[i]=1;
	         safe[s++]=i;
	        }
	       }
	       temp++;
	       }
	       flag=0;
	       for(i=0;i<p;i++)
	       {
	         if(finish[i]==0)
	          {
	           flag=1;
	           break;
	          }
	        }
	        if(flag==1)
	        {
	        printf("\n System is in Deadlock State");
	        }
	        else
	        {
	        printf("\n System is in Safe State:");
	        printf("\n Safe Sequence is:");
	         for(i=0;i<p;i++)
	          printf("P%d\t",safe[i]);
	         }
}
int main()
{
  system("clear");
  printf("\n ----------------------BANKER'S ALGORITHM---------------------------");
  printf("\n Enter the no.of resources and process:");
  scanf("%d%d",&r,&p);
  printf("\nEnter the allocation Table:\n");
   for(i=0;i<p;i++)
    for(j=0;j<r;j++)
    scanf("%d",&allocation[i][j]);
    printf("\n Enter the Max Table:\n");
     for(i=0;i<p;i++)
      for(j=0;j<r;j++)
       scanf("%d",&max[i][j]);
      printf("\nEnter the Vector Available:");
        for(i=0;i<r;i++)
         scanf("%d",&available[i]);
         check();
         printf("\nDo U Want to add new request:(0/1)");
         scanf("%d",&ch);
          if(ch==0)
           exit(1);
           printf("\n Enter the process no:");
           scanf("%d",&ind);
           printf("\nEnter the request:");
            for(i=0;i<r;i++)
             scanf("%d",&req[i]);
             flag=0;
             for(i=0;i<r;i++)
              if(req[i]<=need[ind][i])
               flag=1;
              else
               flag=0;
              if(flag==0)
               {
                 printf("\nRequest can not be satisfied..");
                 exit(1);
                }
                for(i=0;i<r;i++)
                 if(req[i]<=available[i])
                  flag=1;
                 else
                  flag=0;
                 if(flag==0)
                 {
                   printf("\nRequest can not be satisfied...");
                   exit(1);
                 }
                 for(i=0;i<r;i++)
                 {
                   allocation[ind][i]=allocation[ind][i]+req[i];
                   available[i]=available[i]-req[i];
                 }
                 check();
                 return 0;
}


/*
----------------------BANKER'S ALGORITHM---------------------------
 Enter the no.of resources and process:3
5

Enter the allocation Table:
0 1 0
2 0 0
3 0 2
2 1 1
0 0 2

 Enter the Max Table:
7 5 3
3 2 2
9 0 2      
2 2 2
4 3 3

Enter the Vector Available:3 3 2

Need Table is:
7	4	3	
1	2	2	
6	0	0	
0	1	1	
4	3	1	

 System is in Safe State:
 Safe Sequence is:P1	P3	P4	P0	P2	
Do U Want to add new request:(0/1)1

 Enter the process no:1

Enter the request:1     0	2

Need Table is:
7	4	3	
0	2	0	
6	0	0	
0	1	1	
4	3	1	

 System is in Safe State:
*/	        
